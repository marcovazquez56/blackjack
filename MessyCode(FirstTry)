############### Blackjack Project #####################

#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project. ( -> This is the difficulty I used to create this sample of the project)

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run


#11 is the Ace.
import random
from replit import clear
from art import logo
cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
def deal_card():
  cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
  new_card = random.choice(cards)
  return new_card

user_cards = []
computer_cards = []

user_cards.append(deal_card())
user_cards.append(deal_card())
sumuser = sum(user_cards)
print(f"User deck: {user_cards}, total of {sumuser}")
computer_cards.append(deal_card())
computer_cards.append(deal_card())
sumcomp = sum(computer_cards)
print(f"Computer deck: {computer_cards}, total of {sumcomp}")

#and returns the score. 
#Look up the sum() function to help you do this.
play = True
while play == True:
  #print(logo)
  def calculate_score(deck_list):
    if sum(deck_list) == 21 and len(deck_list) == 2:
      return 0
    #elif x > 21:
      #for n in deck_list:
        #if n == 11:
          #deck_list[n] = 1
    if 11 in deck_list and sum(deck_list) > 21:
      deck_list.remove(11)
      deck_list.append(1)
    #print(x)
    return sum(deck_list)


  if calculate_score(deck_list = computer_cards) == 0:
    print("Computer WINS")
    play = False
  elif calculate_score(deck_list = user_cards) == 0:
    print("User WINS")
    play = False
  else:
    if calculate_score(deck_list = user_cards) < 21:
      card_request = input("Do you want another card? Type 'y' or 'n': ").lower()
      if card_request == "y":
        user_cards.append(deal_card())
        print(sum(user_cards))
        print(user_cards)
        if sum(user_cards) > 21:
          print("BUST")
          play = False
      elif card_request == "n":
        while calculate_score(deck_list = computer_cards) < 17:
          computer_cards.append(deal_card())
          print(computer_cards)
        #if calculate_score(deck_list = computer_cards) > 21:
          #print("COMPUTER BUST")
          #play = False
        if calculate_score(deck_list = computer_cards) == 21: #elif
          print("Computer WINS")
          play = False
        if calculate_score(deck_list = user_cards) == 21:
          print("User WINS")
          play = False
        if calculate_score(deck_list = computer_cards) > calculate_score(deck_list = user_cards):
          if calculate_score(deck_list = computer_cards) > 21:
            print("COMPUTER BUST, User WINS")
            play = False
          else:
            print("Computer WINS")
            play = False
        elif calculate_score(deck_list = computer_cards) == calculate_score(deck_list = user_cards):
          print("TIE")
          play = False
        else:
          print("User WINS")
          play = False


